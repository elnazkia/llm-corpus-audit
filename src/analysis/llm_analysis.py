"""
Analysis module for comparing LLM outputs with reference corpora.
"""

import pandas as pd
import numpy as np
from typing import List, Dict, Any
from ..utils.corpus_utils import (
    calculate_lexical_diversity,
    find_collocations,
    get_word_frequencies,
    calculate_basic_stats
)

class LLMAnalyzer:
    def __init__(self, reference_corpus: List[str]):
        """
        Initialize the LLM analyzer with a reference corpus.
        
        Args:
            reference_corpus (List[str]): List of sentences from the reference corpus
        """
        self.reference_corpus = reference_corpus
        self.reference_stats = self._calculate_corpus_stats()
        
    def _calculate_corpus_stats(self) -> Dict[str, Any]:
        """
        Calculate statistics for the reference corpus.
        
        Returns:
            Dict[str, Any]: Dictionary containing corpus statistics
        """
        # Combine all sentences into one text
        corpus_text = ' '.join([' '.join(sent) for sent in self.reference_corpus])
        
        return {
            'lexical_diversity': calculate_lexical_diversity(corpus_text),
            'word_frequencies': get_word_frequencies(corpus_text),
            'basic_stats': calculate_basic_stats(corpus_text),
            'collocations': find_collocations(corpus_text)
        }
    
    def analyze_llm_output(self, llm_output: str) -> Dict[str, Any]:
        """
        Analyze an LLM output and compare it with the reference corpus.
        
        Args:
            llm_output (str): Text generated by an LLM
            
        Returns:
            Dict[str, Any]: Dictionary containing analysis results
        """
        # Calculate statistics for LLM output
        llm_stats = {
            'lexical_diversity': calculate_lexical_diversity(llm_output),
            'word_frequencies': get_word_frequencies(llm_output),
            'basic_stats': calculate_basic_stats(llm_output),
            'collocations': find_collocations(llm_output)
        }
        
        # Compare with reference corpus
        comparison = {
            'lexical_diversity_diff': {
                metric: llm_stats['lexical_diversity'][metric] - 
                       self.reference_stats['lexical_diversity'][metric]
                for metric in llm_stats['lexical_diversity']
            },
            'basic_stats_diff': {
                metric: llm_stats['basic_stats'][metric] - 
                       self.reference_stats['basic_stats'][metric]
                for metric in llm_stats['basic_stats']
            }
        }
        
        return {
            'llm_stats': llm_stats,
            'reference_stats': self.reference_stats,
            'comparison': comparison
        }
    
    def compare_multiple_outputs(self, llm_outputs: List[str]) -> pd.DataFrame:
        """
        Compare multiple LLM outputs with the reference corpus.
        
        Args:
            llm_outputs (List[str]): List of texts generated by an LLM
            
        Returns:
            pd.DataFrame: DataFrame containing comparison results
        """
        results = []
        
        for i, output in enumerate(llm_outputs):
            analysis = self.analyze_llm_output(output)
            
            # Extract relevant metrics
            result = {
                'output_id': i,
                'word_count': analysis['llm_stats']['basic_stats']['word_count'],
                'sentence_count': analysis['llm_stats']['basic_stats']['sentence_count'],
                'avg_sentence_length': analysis['llm_stats']['basic_stats']['avg_sentence_length'],
                'lexical_diversity': analysis['llm_stats']['basic_stats']['lexical_diversity'],
                'ttr': analysis['llm_stats']['lexical_diversity']['ttr'],
                'mtld': analysis['llm_stats']['lexical_diversity']['mtld']
            }
            
            results.append(result)
        
        return pd.DataFrame(results) 